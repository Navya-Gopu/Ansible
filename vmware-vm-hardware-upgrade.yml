---
- name: Playbook check if host exists in inventory
  gather_facts: false
  hosts: localhost

  tasks:
    - block:
      - name: "Fail if Extra Variable {{ HOSTS }} does not exist in Ansible Tower's inventory"
        fail:
          msg: "{{ item }} does not exist in Ansible Tower's inventory."
        when: "item not in groups['all']"
        with_items: "{{HOSTS}}"

      rescue:
      - name: Failure to get host in tower inventory
        debug:
          msg: "SYNTBOT_OUTPUT: FAILED: This target host {{ HOSTS }} does not exist in the Ansible Tower Inventory 2L22"
        failed_when: True

- name: Playbook check if host is Windows
  gather_facts: false
  hosts: "{{ HOSTS }}"
  vars:
    HOSTS:
  tasks:
    - block:
      - name: "Fail if Variable ansible_connection is not winrm "
        assert:
          that:
            - ansible_connection == "winrm"
          msg: "Playbook is for Windows not Linux"

      rescue:
      - name: Invalid OS for this playbook
        debug:
          msg: "SYNTBOT_OUTPUT: FAILED: {{ HOSTS }} is a Linux cannot run this playbook"
        failed_when: True


- name: Playbook VM hardware upgrade
  gather_facts: false
  become: false
  hosts: localhost
  vars:
    vm_user: '{{ lookup("env", "VMWARE_USER") }}'
    vm_pwd: '{{ lookup("env", "VMWARE_PASSWORD") }}'
    HOSTS: ''
    VMHOST: ''
  tasks:
    - block:
      - name: Get hostname short name
        set_fact:
          VMHOST: "{{ HOSTS | regex_replace('\\..*')}}"

      - name: Get workflow id to get OS version of the VM
        set_fact:
          WID: "e4d051b9-65d7-4940-9fcd-ed9d5d9b8e5e"
      
      - name: "Call VRO API {{ WID }} to get the OS version of the {{VMHOST}}"
        uri:
          url: "https://de0-vsvro-p01.eu.airbus.corp:8281/vco/api/workflows/{{ WID|trim }}/executions/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: POST
          force_basic_auth: yes
          status_code: 202
          body_format: json
          body: '{"parameters":[{"value": {"string":{"value":"{{VMHOST}}"}},"name": "inVmName","type": "string","scope": "local"}]}'
          validate_certs: no
        register: this

      - name: workflow submitted to get OS version of the VM
        debug:
          msg: "workflow has been successfuly submitted: {{ this.location | urlsplit('path') }}"

      - name: Loop checking workflow completeness to get OS version of the VM
        uri:
          url: "{{ this.location }}state/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_status
        until: "vro_status.json.value|default('empty') == 'completed' or vro_status.json.value|default('empty') == 'failed'"
        retries: 15
        delay: 10
        failed_when: "vro_status.json.value|default('empty') != 'completed'"

      - name: Get workflow log for VM OS
        uri:
          url: "{{ this.location }}"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_logs
        ignore_errors: yes

      - name: extract outGuestFullName
        set_fact:
          outGuestFullName: "{{ vro_logs.json['output-parameters'] | json_query(jmesquery) }}"
        vars:
          jmesquery: "[?name=='outGuestFullName'][value]"

      - name: set inGuestFullName
        set_fact:
          inGuestFullName: "{{ outGuestFullName | regex_replace ('.*value.*: u', '') | regex_replace ('}}]]', '')  | regex_replace(\"'\", '') }}"

      - name: Display VM OS
        debug:
          msg: "VM OS is : {{ inGuestFullName }}"

##########################

      - name: Get workflow id to shutdown the VM
        set_fact:
          WID: "03dc0455-ba63-40ba-8937-bb2fdca5b801"

      - name: "Call VRO API {{ WID }} to shutdown {{VMHOST}}"
        uri:
          url: "https://de0-vsvro-p01.eu.airbus.corp:8281/vco/api/workflows/{{ WID|trim }}/executions/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: POST
          force_basic_auth: yes
          status_code: 202
          body_format: json
          body: '{"parameters":[{"value": {"string":{"value":"{{VMHOST}}"}},"name": "inVmName","type": "string","scope": "local"}]}'
          validate_certs: no
        register: this

      - name: workflow submitted to shutdown the VM
        debug:
          msg: "workflow has been successfuly submitted: {{ this.location | urlsplit('path') }}"

      - name: Loop checking workflow completeness to shutdown the VM
        uri:
          url: "{{ this.location }}state/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_status
        until: "vro_status.json.value|default('empty') == 'completed' or vro_status.json.value|default('empty') == 'failed'"
        retries: 15
        delay: 10
        failed_when: "vro_status.json.value|default('empty') != 'completed'"
        ignore_errors: yes

#      - name: DEBUG
#        debug:
#          msg: "vro_status.json.value : {{ vro_status.json.value }}"

###################################################
      - name: Get workflow id to get the VM state
        set_fact:
          WID: "9260bbbb-be6c-4f49-af11-93ca4d8b4952"

      - name: "Call VRO API {{ WID }} to get state of {{VMHOST}}"
        uri:
          url: "https://de0-vsvro-p01.eu.airbus.corp:8281/vco/api/workflows/{{ WID|trim }}/executions/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: POST
          force_basic_auth: yes
          status_code: 202
          body_format: json
          body: '{"parameters":[{"value": {"string":{"value":"{{VMHOST}}"}},"name": "inVmName","type": "string","scope": "local"}]}'
          validate_certs: no
        register: this

      - name: workflow submitted for VM status
        debug:
          msg: "workflow has been successfuly submitted: {{ this.location | urlsplit('path') }}"

      - name: Loop checking workflow completeness for VM state
        uri:
          url: "{{ this.location }}state/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_status
        until: "vro_status.json.value|default('empty') == 'completed' or vro_status.json.value|default('empty') == 'failed'"
        retries: 6
        delay: 10
        failed_when: "vro_status.json.value|default('empty') != 'completed'"

      - name: Get workflow log for VM state
        uri:
          url: "{{ this.location }}"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_logs
        ignore_errors: yes

      - name: extract outVmState
        set_fact:
          outVmState: "{{ vro_logs.json['output-parameters'] | json_query(jmesquery) }}"
        vars:
          jmesquery: "[?name=='outVmState'][value]"

      - name: Display VM state
        debug:
          msg: "VM is in state: {{ outVmState }}"

#############################################################
      - name: Get workflow id to force power off of the VM
        set_fact:
          WID: "116b1234-5f68-4401-b513-d07cf1ad17f7"
        when: outVmState is not search('poweredOff')

      - name: "Call VRO API {{ WID }} to power off {{VMHOST}}"
        uri:
          url: "https://de0-vsvro-p01.eu.airbus.corp:8281/vco/api/workflows/{{ WID|trim }}/executions/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: POST
          force_basic_auth: yes
          status_code: 202
          body_format: json
          body: '{"parameters":[{"value": {"string":{"value":"{{VMHOST}}"}},"name": "inVmName","type": "string","scope": "local"}]}'
          validate_certs: no
        register: this
        when: outVmState is not search('poweredOff')

      - name: workflow submitted to power off the VM
        debug:
          msg: "workflow has been successfuly submitted: {{ this.location | urlsplit('path') }}"
        when: outVmState is not search('poweredOff')

      - name: Loop checking workflow completeness to power off the VM
        uri:
          url: "{{ this.location }}state/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_status
        until: "vro_status.json.value|default('empty') == 'completed' or vro_status.json.value|default('empty') == 'failed'"
        retries: 12
        delay: 10
        failed_when: "vro_status.json.value|default('empty') != 'completed'"
        when: outVmState is not search('poweredOff')

#############################################################################
      - name: "Get workflow id to upgrade Hardware"
        set_fact:
          WID: "435bd023-a35f-4784-9a48-fbb46bed8265"

      - name: "Call VRO API {{ WID }} to upgrade Hardware of {{ VMHOST }}"
        uri:
          url: "https://de0-vsvro-p01.eu.airbus.corp:8281/vco/api/workflows/{{ WID|trim }}/executions/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: POST
          force_basic_auth: yes
          status_code: 202
          body_format: json
          body: '{"parameters":[{"value": {"string":{"value":"{{VMHOST}}"}},"name": "inVmName","type": "string","scope": "local"},{"value": {"string":{"value":"{{inGuestFullName}}"}},"name": "inGuestFullName","type": "string","scope": "local"}]}'
          validate_certs: no
        register: this

      - name: workflow submitted to upgrade the hardware VM
        debug:
          msg: "workflow has been successfuly submitted: {{ this.location | urlsplit('path') }}"

      - name: Loop checking workflow completeness to upgrade the hardware VM
        uri:
          url: "{{ this.location }}state/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_status
        until: "vro_status.json.value|default('empty') == 'completed' or vro_status.json.value|default('empty') == 'failed'"
        retries: 7
        delay: 10
        failed_when: "vro_status.json.value|default('empty') != 'completed'"

###################################################################################
      - name: Get workflow id to start the VM
        set_fact:
          WID: "0c8a869e-5154-49f4-bc75-763af4e65e4b"

      - name: "Call VRO API {{ WID }} to start {{ VMHOST }}"
        uri:
          url: "https://de0-vsvro-p01.eu.airbus.corp:8281/vco/api/workflows/{{ WID|trim }}/executions/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: POST
          force_basic_auth: yes
          status_code: 202
          body_format: json
          body: '{"parameters":[{"value": {"string":{"value":"{{VMHOST}}"}},"name": "inVmName","type": "string","scope": "local"}]}'
          validate_certs: no
        register: this

      - name: workflow submitted to start the VM
        debug:
          msg: "workflow has been successfuly submitted: {{ this.location | urlsplit('path') }}"

      - name: Loop checking workflow completeness to start the VM
        uri:
          url: "{{ this.location }}state/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_status
        until: "vro_status.json.value|default('empty') == 'completed' or vro_status.json.value|default('empty') == 'failed'"
        retries: 15
        delay: 10
        failed_when: "vro_status.json.value|default('empty') != 'completed'"

      - name: Log output for SYNTBOT 
        debug:
          msg:
            - "SYNTBOT_OUTPUT: SUCCESSFUL: VM hardware info have been updated for {{HOSTS}}" 

      rescue:
      - name: Get log if workflow failed
        uri:
          url: "{{ this.location }}"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_logs
        ignore_errors: yes
        when: "vro_status.json.value|default('empty') != 'completed'"

      - name: "FAILED log for Syntbot"
        debug:
          msg: "SYNTBOT_OUTPUT: FAILED: Task {{ ansible_failed_task.name}} failed: {{ vro_logs.json['output-parameters']|default('empty')}}"
        failed_when: True
