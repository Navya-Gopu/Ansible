---
- name: Playbook check if host exists in inventory
  gather_facts: false
  hosts: localhost

  tasks:
    - block:
      - name: "Fail if Extra Variable {{ vmHOSTS }} does not exist in Ansible Tower's inventory"
        fail:
          msg: "{{ item }} does not exist in Ansible Tower's inventory."
        when: "item not in groups['all']"
        with_items: "{{vmHOSTS}}"

      rescue:
      - name: Failure to get host in tower inventory
        debug:
          msg: "SYNTBOT_OUTPUT: FAILED: This target host {{ vmHOSTS }} does not exist in the Ansible Tower Inventory 2L22"
        failed_when: True

- name: Playbook create snapshot of a VM via VRO API
  gather_facts: true
  become: false
  hosts: localhost
  vars:
    vm_user: '{{ lookup("env", "VMWARE_USER") }}'
    vm_pwd: '{{ lookup("env", "VMWARE_PASSWORD") }}'
    vmHOSTS: ''
    inVmName: ''
    inSnapshotName: ''
    inSnapshotDescription: ''
    WID: 81d3bec7-ded8-416a-9b81-9049e8116789

  tasks:
    - block:
      - name: Assert that snapshot name is provided
        assert:
          that:
            - inSnapshotName | mandatory
            - inSnapshotName is defined
            - inSnapshotName | length > 0

      - name: Get hostname short name
        set_fact:
          inVmName: "{{ vmHOSTS | regex_replace('\\..*')}}"

      - name: Add timestamp to Snapshot name
        set_fact:
          NEWinSnapshotName: "{{ inSnapshotName }}{{ ansible_date_time.date }} - {{ ansible_date_time.time }} {{ ansible_date_time.tz}}"

      - name: "Call VRO API {{ WID }}"
        uri:
          url: "https://de0-vsvro-p01.eu.airbus.corp:8281/vco/api/workflows/{{ WID|trim }}/executions/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: POST
          force_basic_auth: yes
          status_code: 202
          body_format: json
          body: '{"parameters":[{"value": {"string":{"value":"{{inVmName}}"}},"name": "inVmName","type": "string","scope": "local"},{"value": {"string":{"value":"{{NEWinSnapshotName}}"}},"name": "inSnapshotName","type": "string","scope": "local"},{"value": {"string":{"value":"{{inSnapshotDescription}}"}},"name": "inSnapshotDescription","type": "string","scope": "local"}]}'
          validate_certs: no
        register: this

      - name: workflow submitted
        debug:
          msg: "workflow has been successfuly submitted: {{ this.location | urlsplit('path') }}"

      - name: Loop checking workflow completeness
        uri:
          url: "{{ this.location }}state/"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_status
        until: "vro_status.json.value|default('empty') == 'completed' or vro_status.json.value|default('empty') == 'failed'"
        retries: 30
        delay: 30
        failed_when: "vro_status.json.value|default('empty') != 'completed'"

      - name: Get workflow log
        uri:
          url: "{{ this.location }}"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_logs
        ignore_errors: yes

      - name: extract outSnapshotId
        set_fact:
          outSnapshotId: "{{ vro_logs.json['output-parameters'] | json_query(jmesquery) }}"
        vars:
          jmesquery: "[?name=='outSnapshotId'][value]"


      - name: Log output for SYNTBOT 
        debug:
          msg:
            - "SYNTBOT_OUTPUT: SUCCESSFUL: snapshot of VM {{vmHOSTS}} has been created" 
#            - "SYNTBOT_OUTPUT: {{ vro_logs.json['output-parameters']|default('empty')}}"
            - "SYNTBOT_DISPLAY: outSnapshotId: {{ outSnapshotId | regex_replace ('.*value.*: u', '') | regex_replace ('}}]]', '') }}"


      rescue:
      - name: Get log if workflow failed
        uri:
          url: "{{ this.location }}"
          user: "{{ vm_user }}"
          password: "{{ vm_pwd }}"
          method: GET
          force_basic_auth: yes
          status_code: 200
          body_format: json
          validate_certs: no
        register: vro_logs
        ignore_errors: yes
        when: "vro_status.json.value|default('empty') != 'completed'"

      - name: "FAILED log for Syntbot"
        debug:
          msg: "SYNTBOT_OUTPUT: FAILED: Task {{ ansible_failed_task.name}} failed: {{ vro_logs.json['output-parameters']|default('empty')}}"
        failed_when: True
